#----------------------------#
#------- Class 2 ------------#
#----------------------------#

# Index
# 1: packages 
# 2: plots
# 3: import excel
# 4: dplyr, Data Transformation 

# set working directory 

setwd('C:/Users/spanport/Desktop/Spring20/R/') # run with Ctrl + Enter


# 1: packages: Collections of functions 
# install.packages('nombre')
# library('nombre') llamar al paquete 

# Estructura general de una funcion
#name = function(argumento){      siempre partir con letras (argumento, variables de la funcion)
#  cualquier cosa 
#  return(resultado)
#}

fa_to_cel = function(fa = 32){
  # formula 
  cel = (fa - 32) * 5 / 9
  
  # resultado de la function
  return(cel)
}

# test function 
fa_to_cel # me muestra el codigo
fa_to_cel() # ejecutar funcion 
fa_to_cel(fa = 73) # funcion mas argumento + valor 
fa_to_cel(40) #se omite el argumento
cel1 = fa_to_cel(85) #crear una variable que viene de una funcion 

# 2: plots
library(ggplot2)

# get data
# ?mtcars
df1 =  mtcars 

# Bar plot
car_names = rownames(df1[1:3,])# selecciona fila 

car_names2 = rownames(df1) 

ggplot(data = df1[1:3,], aes(x=car_names, y=mpg)) + # grafico de barras 
  geom_bar(stat = "identity")
ggplot(data = df1 , aes(x=car_names2, y=mpg)) + 
  geom_bar(stat = "identity")


# Grafico de lineas
id1 = 1:nrow(df1)
ggplot(data = df1, aes(x =id1 ,y=mpg)) + # data, variables, tipo de grafico 
  geom_line() +
  geom_point()

# histogram  distribucion de una variable (altura indica frequencia)
ggplot(data = df1, aes(x=mpg)) + 
  geom_histogram(bins = 7) # bins numero de barras withdt :ancho de barra 
ggplot(data = df1, aes(x=mpg)) + 
  geom_histogram(bins = 5)

# density: distribucion de una variable 
ggplot(data = df1, aes(x=mpg)) +
  geom_density(fill ="gray", alpha=0.8)

# scatter plot (wight and mpg) relacion entre dos variables 
ggplot(data = df1, aes(x=wt, y=mpg)) + 
  geom_point()

number_cyl = factor(df1$cyl)   # ?factor
ggplot(data = df1, aes(x=wt, y=mpg, color = number_cyl)) + 
  geom_point(size=6) 
  
# 3: import excel
library('readxl')

# get data
df2 = read_excel('encuesta1.xlsx')
  
# 4: dplyr, Data Transformation 
library(tidyverse)  # ggplot2, dplyr, tidyr, readr, purr, tiblle, stringr, forcats

# agregar variable check 
df2['check'] = 'revisado'

# Get the second data 
df3 = read_csv('encuesta2.csv')

# agregar variable check, a la base df3
df3['check'] ='No revisado'

# unir base df2 y df3 (por filas, append)
df4 = bind_rows(df2, df3)

# read (load) base con informacion de encuestados
df5 = read_csv('info_encuestados.csv')

# crear una nueva base de datos que contenga informacion df4 y df5

df6 = left_join(df4, df5, by = 'id')



cel_to_fa = function(cel = 32){
  # formula 
  fa = (cel - 32) * 9/ 5
  
  # resultado de la function
  return(fa)
}
cel_to_fa(cel = 25)

